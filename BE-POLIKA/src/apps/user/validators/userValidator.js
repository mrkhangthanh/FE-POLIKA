const { body,param } = require('express-validator');
const UserModel = require('../../auth/models/user');

exports.createUserValidation = [
  body('name')
    .notEmpty()
    .withMessage('T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
    .isLength({ min: 2 })
    .withMessage('T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±.'),

  body('email')
    .notEmpty()
    .withMessage('Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
    .isEmail()
    .withMessage('ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá.')
    .custom(async (value) => {
      const user = await UserModel.findOne({ email: value });
      if (user) {
        throw new Error('Email ƒë√£ t·ªìn t·∫°i.');
      }
      return true;
    }),

  body('password')
    .notEmpty()
    .withMessage('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
    .isLength({ min: 8 })
    .withMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±.'),

  body('phone_number')
    .notEmpty()
    .withMessage('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
    .matches(/^[0-9]{10,11}$/)
    .withMessage('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ t·ª´ 10 ƒë·∫øn 11 ch·ªØ s·ªë.')
    .custom(async (value) => {
      const user = await UserModel.findOne({ phone_number: value });
      if (user) {
        throw new Error('S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i.');
      }
      return true;
    }),

  body('role')
    .notEmpty()
    .withMessage('Vai tr√≤ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.')
    .isIn(['admin', 'manager', 'content_writer', 'technician', 'customer', 'agent'])
    .withMessage('Vai tr√≤ kh√¥ng h·ª£p l·ªá.'),

//   // üî¥ [S·ª¨A] Ch·ªâ y√™u c·∫ßu address n·∫øu role l√† customer ho·∫∑c technician
//   body('address.street')
//     .if(body('role').isIn(['customer', 'technician']))
//     .notEmpty()
//     .withMessage('ƒê·ªãa ch·ªâ ƒë∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng cho customer ho·∫∑c technician.'),

//   body('address.city')
//     .if(body('role').isIn(['customer', 'technician']))
//     .notEmpty()
//     .withMessage('Th√†nh ph·ªë kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng cho customer ho·∫∑c technician.'),

//   body('address.district')
//     .if(body('role').isIn(['customer', 'technician']))
//     .notEmpty()
//     .withMessage('Qu·∫≠n/huy·ªán kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng cho customer ho·∫∑c technician.'),

//   body('address.ward')
//     .if(body('role').isIn(['customer', 'technician']))
//     .notEmpty()
//     .withMessage('Ph∆∞·ªùng/x√£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng cho customer ho·∫∑c technician.'),
];
exports.updateUserValidation = [
  param('id').isMongoId().withMessage('ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.'),

  body('email')
    .optional()
    .isEmail()
    .withMessage('Vui l√≤ng cung c·∫•p m·ªôt ƒë·ªãa ch·ªâ email h·ª£p l·ªá.'),

  body('phone_number')
    .optional()
    .isString()
    .withMessage('S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† m·ªôt chu·ªói k√Ω t·ª±.'),

  body('role')
    .optional()
    .isIn(['customer', 'technician', 'admin'])
    .withMessage('Vai tr√≤ kh√¥ng h·ª£p l·ªá.'),

  body('status')
    .optional()
    .isIn(['active', 'inactive'])
    .withMessage('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.'),
];
exports.deleteUserValidation = [
  param('id').isMongoId().withMessage('ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.'),
];